name: build_docker

on:
  push:
    branches: [develop]
  release:
    types: [created] # 表示在创建新的 Release 时触发

jobs:
  build-static:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - uses: actions/setup-node@v3
        with:
          cache: 'pnpm'

      - name: Build front and back
        run: |
          pnpm install --frozen-lockfile
          pnpm build
          mkdir static
          mv dist/ static/
          cd service
          pnpm install --frozen-lockfile
          pnpm build
          mv build/ ../static/

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.GHP_TOKEN }}
          publish_dir: ./static # 静态文件所在的目录
          publish_branch: ${{ github.ref_name }}-static # 部署到的分支
          force_orphan: true # 如果发布分支不存在，创建一个新的分支

  build_docker:
    name: Build docker

		needs: build-static

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - run: |
          echo "本次构建的版本为：${GITHUB_REF_NAME} (但是这个变量目前上下文中无法获取到)"
          echo 本次构建的版本为：${{ github.ref_name }}
          env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/chatgpt-web:${{ github.ref_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/chatgpt-web:latest
          cache-from: type=registry,ref=${{ github.repository }}:cache
          cache-to: type=registry,ref=${{ github.repository }}:cache,mode=max
